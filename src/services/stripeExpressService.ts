
import { stripeBackendService } from './stripeBackendService';

// Service pour g√©rer l'int√©gration avec notre backend simul√©
export class StripeExpressService {
  // Simuler les endpoints backend pour le d√©veloppement
  async handleCreateSetup(data: { campaignId: string; campaignName: string; userEmail: string }) {
    try {
      console.log('üîÑ Traitement cr√©ation setup pour:', data.userEmail);
      
      // 1. Cr√©er ou r√©cup√©rer le client Stripe
      const customer = await stripeBackendService.createOrGetCustomer(data.userEmail);
      
      // 2. Cr√©er le SetupIntent
      const setupIntent = await stripeBackendService.createSetupIntent(customer.id, data.campaignName);
      
      // 3. Construire l'URL de redirection Stripe
      const checkoutUrl = `https://checkout.stripe.com/c/pay/${setupIntent.client_secret}#fidkdWxOYHwnPyd1blpxYHZxWjA0TUl9VHx2YnM8SkNmZGBHPUN1d2lIVlN3fUxAaDNMUkNJXDVfNjVdN0JnQT1SXzhOXyU2U001dUpOQ3x1YklOV0p8TnM0SVdEckZvVnNdfVROQGpVaUhJVz03X2NfYCcpJ2N3amhWYHdzYHcnP3F3cGApJ2lkfGpwcVF8dWAnPyd2bGtiaWBabHFgaCcpJ2BrZGdpYFVpZGZgbWppYWB3dic%2FcXdwYCknaWR8aEZiXWFgeSUl`;
      
      return {
        setupIntentId: setupIntent.id,
        stripeCustomerId: customer.id,
        checkoutUrl: checkoutUrl,
      };
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation setup:', error);
      throw error;
    }
  }

  async handleCheckSetup(setupIntentId: string) {
    try {
      console.log('üîç V√©rification setup:', setupIntentId);
      
      const setupIntent = await stripeBackendService.getSetupIntent(setupIntentId);
      
      return {
        status: setupIntent.status,
        paymentMethod: setupIntent.payment_method,
      };
    } catch (error) {
      console.error('‚ùå Erreur v√©rification setup:', error);
      throw error;
    }
  }

  async sendPaymentLinksToAffiliates(affiliatePayments: any[], campaignName: string) {
    console.log('üìß Envoi des Payment Links aux affili√©s');
    
    const results = [];
    
    for (const payment of affiliatePayments) {
      if (payment.totalCommission > 0) {
        try {
          // Cr√©er le Payment Link Stripe
          const paymentLink = await stripeBackendService.createPaymentLink(
            payment.totalCommission,
            'eur',
            payment.affiliateEmail,
            campaignName
          );
          
          // Simuler l'envoi d'email (en vrai, vous utiliseriez un service d'email)
          console.log(`üìß Payment Link envoy√© √† ${payment.affiliateEmail}:`);
          console.log(`   üí∞ Montant: ${payment.totalCommission.toFixed(2)}‚Ç¨`);
          console.log(`   üîó Lien: ${paymentLink.url}`);
          
          results.push({
            affiliateEmail: payment.affiliateEmail,
            amount: payment.totalCommission,
            paymentLinkUrl: paymentLink.url,
            status: 'sent'
          });
          
          // D√©lai pour √©viter le rate limiting
          await new Promise(resolve => setTimeout(resolve, 100));
          
        } catch (error) {
          console.error(`‚ùå Erreur envoi √† ${payment.affiliateEmail}:`, error);
          results.push({
            affiliateEmail: payment.affiliateEmail,
            status: 'error',
            error: error.message
          });
        }
      }
    }
    
    console.log('‚úÖ Tous les Payment Links ont √©t√© trait√©s');
    return results;
  }
}

export const stripeExpressService = new StripeExpressService();
