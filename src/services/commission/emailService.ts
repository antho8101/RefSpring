
import { PaymentDistribution } from './types';
import { EmailService } from '../emailService';

export const sendStripePaymentLinks = async (
  distribution: PaymentDistribution,
  campaignName: string
): Promise<void> => {
  try {
    console.log('üìß PRODUCTION: Envoi d\'emails r√©els pour:', campaignName);
    console.log('üí∞ Nombre d\'affili√©s √† payer:', distribution.affiliatePayments.length);

    if (distribution.affiliatePayments.length === 0) {
      console.log('‚ÑπÔ∏è Aucun affili√© √† payer');
      return;
    }

    // Pr√©parer les donn√©es pour l'envoi group√© d'emails
    const emailData = distribution.affiliatePayments.map(payment => ({
      affiliateEmail: payment.affiliateEmail,
      affiliateName: payment.affiliateName,
      amount: payment.totalCommission,
      campaignName: campaignName,
      paymentLinkUrl: `https://refspring.com/payment-received?amount=${payment.totalCommission}&campaign=${encodeURIComponent(campaignName)}`
    }));

    // Envoyer les emails r√©els via EmailJS
    const result = await EmailService.sendBulkCommissionEmails(emailData);
    
    console.log('üìß PRODUCTION: R√©sultat envoi emails:', {
      successful: result.successful,
      failed: result.failed,
      errors: result.errors
    });

    if (result.failed > 0) {
      console.warn('‚ö†Ô∏è PRODUCTION: Certains emails ont √©chou√©:', result.errors);
    }

    console.log('‚úÖ PRODUCTION: Processus d\'envoi d\'emails termin√©');

  } catch (error) {
    console.error('‚ùå PRODUCTION: Erreur envoi emails:', error);
    throw error;
  }
};
