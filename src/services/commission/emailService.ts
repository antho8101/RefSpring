
import { PaymentDistribution } from './types';
import { EmailService } from '../emailService';

// üÜï NOUVEAU : Service Stripe Connect pour transfers automatiques
export const processStripeTransfers = async (
  distribution: PaymentDistribution,
  campaignName: string
): Promise<void> => {
  try {
    console.log('üí∏ STRIPE CONNECT: Traitement des transfers pour:', campaignName);
    console.log('üí∞ Nombre d\'affili√©s √† payer:', distribution.affiliatePayments.length);

    if (distribution.affiliatePayments.length === 0) {
      console.log('‚ÑπÔ∏è Aucun affili√© √† payer');
      return;
    }

    const transferResults = [];

    // Traiter chaque paiement d'affili√©
    for (const payment of distribution.affiliatePayments) {
      try {
        // V√©rifier que l'affili√© a un compte Stripe Connect
        if (!payment.stripeAccountId) {
          console.warn(`‚ö†Ô∏è STRIPE CONNECT: Affili√© ${payment.affiliateName} n'a pas de compte Stripe Connect`);
          transferResults.push({
            affiliateId: payment.affiliateId,
            status: 'failed',
            error: 'Compte Stripe Connect non configur√©'
          });
          continue;
        }

        console.log(`üí∏ Cr√©ation transfer pour ${payment.affiliateName} - ${payment.totalCommission}‚Ç¨`);
        
        // Cr√©er le transfer Stripe
        const response = await fetch('/api/stripe/create-transfer', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            accountId: payment.stripeAccountId,
            amount: Math.round(payment.totalCommission * 100), // Convertir en centimes
            description: `Commission RefSpring - Campagne "${campaignName}"`,
            metadata: {
              affiliate_id: payment.affiliateId,
              affiliate_name: payment.affiliateName,
              campaign_name: campaignName,
              commission_amount: payment.totalCommission.toString(),
            },
          }),
        });

        if (!response.ok) {
          const errorText = await response.text();
          throw new Error(`Erreur transfer: ${response.status} - ${errorText}`);
        }

        const transferData = await response.json();
        console.log(`‚úÖ Transfer cr√©√© pour ${payment.affiliateName}:`, transferData.transferId);
        
        transferResults.push({
          affiliateId: payment.affiliateId,
          status: 'success',
          transferId: transferData.transferId,
          amount: transferData.amount
        });
        
      } catch (error) {
        console.error(`‚ùå Erreur transfer pour ${payment.affiliateName}:`, error);
        transferResults.push({
          affiliateId: payment.affiliateId,
          status: 'failed',
          error: error.message
        });
      }
    }

    // Compter les r√©sultats
    const successful = transferResults.filter(r => r.status === 'success').length;
    const failed = transferResults.filter(r => r.status === 'failed').length;

    console.log('üìä STRIPE CONNECT: R√©sultats transfers:', {
      successful,
      failed,
      total: transferResults.length
    });

    if (failed > 0) {
      console.warn('‚ö†Ô∏è STRIPE CONNECT: Certains transfers ont √©chou√©:', 
        transferResults.filter(r => r.status === 'failed')
      );
    }

    console.log('‚úÖ STRIPE CONNECT: Processus de transfers termin√©');

  } catch (error) {
    console.error('‚ùå STRIPE CONNECT: Erreur g√©n√©rale transfers:', error);
    throw error;
  }
};

// üÜï NOUVEAU : Service pour cr√©er des Payment Links Stripe r√©els
export const createStripePaymentLinks = async (
  distribution: PaymentDistribution,
  campaignName: string
): Promise<{ affiliateId: string; paymentLinkUrl: string }[]> => {
  console.log('üí≥ STRIPE PAYMENT LINKS: Cr√©ation des liens de paiement pour', distribution.affiliatePayments.length, 'affili√©s');
  
  const paymentLinks = [];
  
  for (const payment of distribution.affiliatePayments) {
    try {
      console.log(`üí≥ Cr√©ation Payment Link pour ${payment.affiliateName} - ${payment.totalCommission}‚Ç¨`);
      
      // Appel √† l'API pour cr√©er le Payment Link Stripe
      const response = await fetch('/api/stripe/create-payment-link', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          affiliateEmail: payment.affiliateEmail,
          affiliateName: payment.affiliateName,
          amount: Math.round(payment.totalCommission * 100), // Convertir en centimes
          description: `Commission RefSpring - Campagne "${campaignName}"`,
          campaignName: campaignName,
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Erreur cr√©ation Payment Link: ${response.status} - ${errorText}`);
      }

      const result = await response.json();
      console.log(`‚úÖ Payment Link cr√©√© pour ${payment.affiliateName}:`, result.paymentLinkUrl);
      
      paymentLinks.push({
        affiliateId: payment.affiliateId,
        paymentLinkUrl: result.paymentLinkUrl
      });
      
    } catch (error) {
      console.error(`‚ùå Erreur cr√©ation Payment Link pour ${payment.affiliateName}:`, error);
      // En cas d'erreur, utiliser un lien de fallback
      paymentLinks.push({
        affiliateId: payment.affiliateId,
        paymentLinkUrl: `https://refspring.com/payment-error?affiliate=${payment.affiliateId}&amount=${payment.totalCommission}`
      });
    }
  }
  
  return paymentLinks;
};

// üîÑ MIGRATION: Nouvelle fonction principale qui utilise Stripe Connect si possible, sinon Payment Links
export const sendStripePaymentLinks = async (
  distribution: PaymentDistribution,
  campaignName: string
): Promise<void> => {
  try {
    console.log('üîÑ PAYMENT SYSTEM: D√©marrage processus de paiement hybride pour:', campaignName);
    
    // S√©parer les affili√©s avec/sans Stripe Connect
    const affiliatesWithStripeConnect = distribution.affiliatePayments.filter(p => p.stripeAccountId);
    const affiliatesWithoutStripeConnect = distribution.affiliatePayments.filter(p => !p.stripeAccountId);
    
    console.log('üìä PAYMENT SYSTEM: R√©partition des affili√©s:', {
      withStripeConnect: affiliatesWithStripeConnect.length,
      withoutStripeConnect: affiliatesWithoutStripeConnect.length,
      total: distribution.affiliatePayments.length
    });

    // √âTAPE 1: Traiter les transfers Stripe Connect (automatiques)
    if (affiliatesWithStripeConnect.length > 0) {
      console.log('üí∏ Traitement des transfers Stripe Connect...');
      await processStripeTransfers({
        ...distribution,
        affiliatePayments: affiliatesWithStripeConnect
      }, campaignName);
    }

    // √âTAPE 2: Traiter les Payment Links pour les autres (emails)
    if (affiliatesWithoutStripeConnect.length > 0) {
      console.log('üìß Traitement des Payment Links pour affili√©s sans Stripe Connect...');
      await sendStripePaymentLinksLegacy({
        ...distribution,
        affiliatePayments: affiliatesWithoutStripeConnect
      }, campaignName);
    }

    console.log('‚úÖ PAYMENT SYSTEM: Processus de paiement hybride termin√©');

  } catch (error) {
    console.error('‚ùå PAYMENT SYSTEM: Erreur processus hybride:', error);
    throw error;
  }
};

// üîÑ RENOMMAGE: Ancienne fonction pour les Payment Links
export const sendStripePaymentLinksLegacy = async (
  distribution: PaymentDistribution,
  campaignName: string
): Promise<void> => {
  try {
    console.log('üìß PRODUCTION: Envoi d\'emails r√©els pour:', campaignName);
    console.log('üí∞ Nombre d\'affili√©s √† payer:', distribution.affiliatePayments.length);

    if (distribution.affiliatePayments.length === 0) {
      console.log('‚ÑπÔ∏è Aucun affili√© √† payer');
      return;
    }

    // üÜï √âTAPE 1 : Cr√©er les Payment Links Stripe r√©els
    console.log('üí≥ Cr√©ation des Payment Links Stripe...');
    const paymentLinks = await createStripePaymentLinks(distribution, campaignName);
    
    // üÜï √âTAPE 2 : Pr√©parer les donn√©es pour l'envoi group√© d'emails avec les vrais liens
    const emailData = distribution.affiliatePayments.map(payment => {
      const paymentLink = paymentLinks.find(link => link.affiliateId === payment.affiliateId);
      
      return {
        affiliateEmail: payment.affiliateEmail,
        affiliateName: payment.affiliateName,
        amount: payment.totalCommission,
        campaignName: campaignName,
        paymentLinkUrl: paymentLink?.paymentLinkUrl || `https://refspring.com/payment-error?affiliate=${payment.affiliateId}`
      };
    });

    // √âTAPE 3 : Envoyer les emails r√©els via EmailJS
    const result = await EmailService.sendBulkCommissionEmails(emailData);
    
    console.log('üìß PRODUCTION: R√©sultat envoi emails:', {
      successful: result.successful,
      failed: result.failed,
      errors: result.errors
    });

    if (result.failed > 0) {
      console.warn('‚ö†Ô∏è PRODUCTION: Certains emails ont √©chou√©:', result.errors);
    }

    console.log('‚úÖ PRODUCTION: Processus d\'envoi d\'emails termin√© avec Payment Links Stripe');

  } catch (error) {
    console.error('‚ùå PRODUCTION: Erreur envoi emails:', error);
    throw error;
  }
};
