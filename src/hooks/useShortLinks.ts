
import { useEffect, useState } from 'react';
import { 
  collection, 
  addDoc, 
  query, 
  where, 
  getDocs,
  doc,
  getDoc
} from 'firebase/firestore';
import { db } from '@/lib/firebase';

export interface ShortLink {
  id: string;
  shortCode: string;
  campaignId: string;
  affiliateId: string;
  targetUrl: string;
  createdAt: Date;
  clickCount: number;
}

export const useShortLinks = () => {
  const [loading, setLoading] = useState(false);

  const generateShortCode = () => {
    // G√©n√©rer un code al√©atoire plus long pour √©viter les collisions
    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let result = '';
    for (let i = 0; i < 10; i++) { // Code de 10 caract√®res
      result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
  };

  const createShortLink = async (campaignId: string, affiliateId: string, targetUrl: string) => {
    setLoading(true);
    
    try {
      console.log('üîß D√©but cr√©ation lien court pour:', { campaignId, affiliateId, targetUrl });
      
      if (!db) {
        console.error('‚ùå Base de donn√©es non initialis√©e');
        setLoading(false);
        return null; // Retourner null au lieu de throw pour permettre le fallback
      }
      
      if (!targetUrl || !campaignId || !affiliateId) {
        console.error('‚ùå Param√®tres manquants:', { targetUrl, campaignId, affiliateId });
        setLoading(false);
        return null;
      }
      
      // V√©rifier s'il existe d√©j√† un lien court pour cette combinaison
      console.log('üîç Recherche lien existant...');
      const existingQuery = query(
        collection(db, 'shortLinks'),
        where('campaignId', '==', campaignId),
        where('affiliateId', '==', affiliateId),
        where('targetUrl', '==', targetUrl)
      );
      
      const existingSnapshot = await getDocs(existingQuery);
      console.log('üîç R√©sultats recherche existant:', existingSnapshot.size, 'documents');
      
      if (!existingSnapshot.empty) {
        const existingLink = existingSnapshot.docs[0].data() as ShortLink;
        console.log('‚úÖ Lien court existant trouv√©:', existingLink.shortCode);
        setLoading(false);
        return existingLink.shortCode;
      }

      // G√©n√©rer un nouveau code court unique avec plus d'essais
      let shortCode = generateShortCode();
      let isUnique = false;
      let attempts = 0;
      const maxAttempts = 50; // Augmenter le nombre d'essais
      
      console.log('üé≤ G√©n√©ration nouveau code court...');
      while (!isUnique && attempts < maxAttempts) {
        attempts++;
        console.log('üé≤ Tentative', attempts, '- Code test√©:', shortCode);
        
        try {
          const codeQuery = query(
            collection(db, 'shortLinks'),
            where('shortCode', '==', shortCode)
          );
          const codeSnapshot = await getDocs(codeQuery);
          
          if (codeSnapshot.empty) {
            isUnique = true;
            console.log('‚úÖ Code unique trouv√©:', shortCode);
          } else {
            console.log('‚ùå Code d√©j√† utilis√©, nouveau essai...');
            shortCode = generateShortCode();
          }
        } catch (queryError) {
          console.error('‚ùå Erreur v√©rification unicit√©:', queryError);
          // En cas d'erreur de requ√™te, g√©n√©rer un nouveau code et continuer
          shortCode = generateShortCode();
        }
      }

      if (!isUnique) {
        console.error(`‚ùå Impossible de g√©n√©rer un code unique apr√®s ${attempts} tentatives`);
        setLoading(false);
        return null; // Retourner null au lieu de throw
      }

      // Cr√©er le nouveau lien court
      const shortLinkData = {
        shortCode,
        campaignId,
        affiliateId,
        targetUrl,
        createdAt: new Date(),
        clickCount: 0
      };

      console.log('üíæ DONN√âES √Ä SAUVEGARDER:', shortLinkData);
      const docRef = await addDoc(collection(db, 'shortLinks'), shortLinkData);
      console.log('‚úÖ Lien court cr√©√© avec succ√®s - ID:', docRef.id, '- Code:', shortCode);
      
      // V√©rification imm√©diate optionnelle
      try {
        console.log('üîç V√©rification imm√©diate du lien cr√©√©...');
        const verificationData = await getShortLinkData(shortCode);
        if (verificationData) {
          console.log('‚úÖ V√©rification r√©ussie - URL r√©cup√©r√©e:', verificationData.targetUrl);
        }
      } catch (verificationError) {
        console.warn('‚ö†Ô∏è Erreur v√©rification (non critique):', verificationError);
        // Ne pas bloquer si la v√©rification √©choue
      }
      
      setLoading(false);
      return shortCode;
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation du lien court:', error);
      setLoading(false);
      return null; // Retourner null au lieu de throw pour permettre le fallback
    }
  };

  const getShortLinkData = async (shortCode: string) => {
    try {
      console.log('üîç Recherche du lien court:', shortCode);
      
      if (!db) {
        throw new Error('Base de donn√©es non initialis√©e');
      }
      
      const shortLinksQuery = query(
        collection(db, 'shortLinks'),
        where('shortCode', '==', shortCode)
      );
      
      console.log('üîç Ex√©cution de la requ√™te...');
      const snapshot = await getDocs(shortLinksQuery);
      console.log('üîç R√©sultats de la recherche:', snapshot.size, 'documents trouv√©s');
      
      if (snapshot.empty) {
        console.log('‚ùå Aucun lien court trouv√© pour le code:', shortCode);
        return null;
      }
      
      const doc = snapshot.docs[0];
      const data = {
        id: doc.id,
        ...doc.data(),
        createdAt: doc.data().createdAt?.toDate(),
      } as ShortLink;
      
      console.log('‚úÖ Donn√©es du lien court r√©cup√©r√©es:', data);
      return data;
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration du lien court:', error);
      throw error;
    }
  };

  return {
    createShortLink,
    getShortLinkData,
    loading
  };
};
