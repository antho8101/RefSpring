
import { useState } from 'react';
import { usePaymentMethods } from '@/hooks/usePaymentMethods';
import { useCampaigns } from '@/hooks/useCampaigns';
import { useToast } from '@/hooks/use-toast';

export const usePaymentVerification = () => {
  const [showPaymentSelector, setShowPaymentSelector] = useState(false);
  const { paymentMethods, loading: paymentMethodsLoading, refreshPaymentMethods } = usePaymentMethods();
  const { updateCampaign } = useCampaigns();
  const { toast } = useToast();

  const verifyPaymentForReactivation = async (campaignId: string, formData: any, onFormDataChange: (data: any) => void) => {
    console.log('üîÑ Tentative de r√©activation - v√©rification des cartes...');
    
    try {
      await refreshPaymentMethods();
      
      if (paymentMethods.length === 0) {
        console.log('‚ùå Aucune carte disponible pour la r√©activation');
        toast({
          title: "Impossible de r√©activer",
          description: "Vous devez d'abord ajouter une carte bancaire pour r√©activer cette campagne.",
          variant: "destructive",
        });
        
        setShowPaymentSelector(true);
        return false;
      }
      
      console.log('‚úÖ Cartes disponibles, r√©activation possible');
      return true;
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification des cartes:', error);
      toast({
        title: "Erreur",
        description: "Impossible de v√©rifier les cartes bancaires",
        variant: "destructive",
      });
      return false;
    }
  };

  const handleCardSelection = async (cardId: string, campaignId: string, formData: any, onFormDataChange: (data: any) => void) => {
    try {
      console.log('üí≥ Association de la carte', cardId, '√† la campagne', campaignId);
      
      await updateCampaign(campaignId, {
        stripePaymentMethodId: cardId,
        isActive: true,
      });
      
      onFormDataChange({ ...formData, isActive: true });
      setShowPaymentSelector(false);
      
      toast({
        title: "‚úÖ Parfait !",
        description: "La carte a √©t√© associ√©e et la campagne a √©t√© r√©activ√©e !",
      });
      
    } catch (error: any) {
      console.error('‚ùå Erreur association carte:', error);
      toast({
        title: "Erreur",
        description: error.message || "Impossible d'associer la carte √† la campagne",
        variant: "destructive",
      });
    }
  };

  const handleAddNewCard = () => {
    setShowPaymentSelector(false);
    toast({
      title: "Redirection Stripe",
      description: "Fonctionnalit√© d'ajout de carte √† impl√©menter",
    });
  };

  return {
    showPaymentSelector,
    setShowPaymentSelector,
    paymentMethods,
    paymentMethodsLoading,
    verifyPaymentForReactivation,
    handleCardSelection,
    handleAddNewCard,
  };
};
