
import { useCampaigns } from '@/hooks/useCampaigns';
import { useToast } from '@/hooks/use-toast';
import { CampaignFormData } from './useCampaignFormState';

export const useCampaignCardSelection = (
  pendingCampaignData: CampaignFormData | null,
  setLoading: (loading: boolean) => void,
  setShowConfetti: (show: boolean) => void,
  setCreatedCampaign: (campaign: { id: string; name: string } | null) => void,
  setShowSuccessModal: (show: boolean) => void,
  setShowPaymentSelector: (show: boolean) => void,
  redirectToStripeForNewCard: (data: CampaignFormData) => Promise<void>,
  triggerSuccessModal: (campaignId: string, campaignName: string) => void
) => {
  const { createCampaign } = useCampaigns();
  const { toast } = useToast();

  const handleCardSelection = async (cardId: string) => {
    if (!pendingCampaignData) return;
    
    try {
      setLoading(true);
      console.log('üí≥ NOUVEAU FLOW: Cr√©ation campagne avec carte s√©lectionn√©e (valid√©e):', cardId);
      
      // Cr√©er la campagne directement finalis√©e car la carte est valid√©e
      const campaignId = await createCampaign({
        name: pendingCampaignData.name,
        description: pendingCampaignData.description,
        targetUrl: pendingCampaignData.targetUrl,
        isActive: pendingCampaignData.isActive,
        isDraft: false, // Directement finalis√©e
        paymentConfigured: true, // Paiement configur√©
        defaultCommissionRate: 10,
        stripePaymentMethodId: cardId,
      });
      
      console.log('‚úÖ NOUVEAU FLOW: Campagne cr√©√©e et finalis√©e:', campaignId);
      
      // Fermer le s√©lecteur
      setShowPaymentSelector(false);
      
      // D√©clencher la modale de succ√®s
      triggerSuccessModal(campaignId, pendingCampaignData.name);
      
      toast({
        title: "Campagne cr√©√©e avec succ√®s !",
        description: "Votre campagne est maintenant active avec la carte s√©lectionn√©e.",
      });
      
      return { success: true, keepMainModalOpen: true };
      
    } catch (error: any) {
      console.error('‚ùå NOUVEAU FLOW: Erreur cr√©ation campagne:', error);
      toast({
        title: "Erreur",
        description: error.message || "Impossible de cr√©er la campagne",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleAddNewCard = async () => {
    if (!pendingCampaignData) return;
    
    try {
      setLoading(true);
      console.log('üí≥ NOUVEAU FLOW: Ajout nouvelle carte ‚Üí Redirection Stripe');
      await redirectToStripeForNewCard(pendingCampaignData);
    } catch (error: any) {
      console.error('‚ùå Erreur ajout nouvelle carte:', error);
      toast({
        title: "Erreur",
        description: error.message || "Impossible d'ajouter une nouvelle carte",
        variant: "destructive",
      });
      setLoading(false);
    }
  };

  return {
    handleCardSelection,
    handleAddNewCard,
  };
};
