
import { useMemo } from 'react';
import { useShortLinks } from './useShortLinks';

export const useTrackingLinkGenerator = () => {
  const { createShortLink } = useShortLinks();

  const generateTrackingLink = useMemo(() => {
    return async (campaignId: string, affiliateId: string, targetUrl: string) => {
      const currentHostname = window.location.hostname;
      let baseUrl;
      
      console.log('üîó TRACKING LINK GENERATOR - D√©but g√©n√©ration');
      console.log('üîó Hostname actuel:', currentHostname);
      console.log('üîó Param√®tres re√ßus:', { campaignId, affiliateId, targetUrl });
      
      if (currentHostname.includes('localhost') || currentHostname.includes('lovableproject.com')) {
        baseUrl = window.location.origin;
      } else {
        baseUrl = 'https://refspring.com';
      }
      
      console.log('üîó Base URL d√©termin√©e:', baseUrl);
      
      // V√©rifier d'abord que l'URL de destination est valide
      if (!targetUrl || !targetUrl.startsWith('http')) {
        console.error('‚ùå URL de destination invalide:', targetUrl);
        throw new Error('URL de destination invalide');
      }
      
      try {
        console.log('üîó Tentative cr√©ation lien court...');
        
        // Ajouter les param√®tres d'affiliation √† l'URL de destination
        const url = new URL(targetUrl);
        url.searchParams.set('ref', affiliateId);
        url.searchParams.set('campaign', campaignId);
        const enhancedTargetUrl = url.toString();
        
        console.log('üîó URL ORIGINALE:', targetUrl);
        console.log('üîó URL ENRICHIE avec param√®tres affiliation:', enhancedTargetUrl);
        
        // Cr√©er un lien court avec l'URL enrichie
        const shortCode = await createShortLink(campaignId, affiliateId, enhancedTargetUrl);
        
        if (!shortCode) {
          console.warn('‚ö†Ô∏è √âchec cr√©ation lien court, g√©n√©ration lien direct avec param√®tres');
          // Fallback: cr√©er un lien direct avec les param√®tres
          const fallbackUrl = new URL('/track', baseUrl);
          fallbackUrl.searchParams.set('c', campaignId);
          fallbackUrl.searchParams.set('a', affiliateId);
          fallbackUrl.searchParams.set('u', encodeURIComponent(targetUrl));
          return fallbackUrl.toString();
        }
        
        console.log('‚úÖ Lien court cr√©√© avec succ√®s:', shortCode);
        const finalLink = `${baseUrl}/s/${shortCode}`;
        console.log('‚úÖ Lien final g√©n√©r√©:', finalLink);
        
        return finalLink;
        
      } catch (error) {
        console.error('‚ùå Erreur cr√©ation lien court:', error);
        
        // Fallback robuste : cr√©er un lien de tracking direct
        console.log('üîÑ Utilisation du fallback de tracking direct');
        try {
          const fallbackUrl = new URL('/track', baseUrl);
          fallbackUrl.searchParams.set('c', campaignId);
          fallbackUrl.searchParams.set('a', affiliateId);
          fallbackUrl.searchParams.set('u', encodeURIComponent(targetUrl));
          
          const directLink = fallbackUrl.toString();
          console.log('‚úÖ Lien de fallback g√©n√©r√©:', directLink);
          return directLink;
        } catch (fallbackError) {
          console.error('‚ùå √âchec complet g√©n√©ration lien:', fallbackError);
          throw new Error('Impossible de g√©n√©rer un lien de tracking');
        }
      }
    };
  }, [createShortLink]);

  return { generateTrackingLink };
};
