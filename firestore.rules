
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ======================================
    // RÈGLES POUR LES CAMPAGNES
    // ======================================
    match /campaigns/{campaignId} {
      // Lecture : uniquement le propriétaire
      allow read: if request.auth != null && 
                     request.auth.uid == resource.data.userId;
      
      // Création : utilisateur authentifié + structure valide
      allow create: if request.auth != null && 
                       request.auth.uid == request.resource.data.userId &&
                       isValidCampaign(request.resource.data);
      
      // Mise à jour : uniquement le propriétaire + structure valide
      allow update: if request.auth != null && 
                       request.auth.uid == resource.data.userId &&
                       request.auth.uid == request.resource.data.userId &&
                       isValidCampaign(request.resource.data);
      
      // Suppression : uniquement le propriétaire
      allow delete: if request.auth != null && 
                       request.auth.uid == resource.data.userId;
    }
    
    // ======================================
    // RÈGLES POUR LES AFFILIÉS
    // ======================================
    match /affiliates/{affiliateId} {
      // Lecture : propriétaire de la campagne associée
      allow read: if request.auth != null && 
                     request.auth.uid == resource.data.userId;
      
      // Création : utilisateur authentifié + campagne valide + structure valide
      allow create: if request.auth != null && 
                       request.auth.uid == request.resource.data.userId &&
                       isValidAffiliate(request.resource.data) &&
                       isOwnerOfCampaign(request.resource.data.campaignId);
      
      // Mise à jour : propriétaire + structure valide
      allow update: if request.auth != null && 
                       request.auth.uid == resource.data.userId &&
                       request.auth.uid == request.resource.data.userId &&
                       isValidAffiliate(request.resource.data);
      
      // Suppression : propriétaire
      allow delete: if request.auth != null && 
                       request.auth.uid == resource.data.userId;
    }
    
    // ======================================
    // RÈGLES POUR LES CLICS (Temporairement permissives)
    // ======================================
    match /clicks/{clickId} {
      // Lecture : propriétaire de la campagne associée
      allow read: if request.auth != null && 
                     isOwnerOfCampaign(resource.data.campaignId);
      
      // Création : propriétaire de la campagne (temporaire avant Cloud Functions)
      allow create: if request.auth != null && 
                       isOwnerOfCampaign(request.resource.data.campaignId);
      
      // Mise à jour : propriétaire (pour compteurs)
      allow update: if request.auth != null && 
                       isOwnerOfCampaign(resource.data.campaignId);
      
      // Suppression : propriétaire (pour suppression en cascade)
      allow delete: if request.auth != null && 
                       isOwnerOfCampaign(resource.data.campaignId);
    }
    
    // ======================================
    // RÈGLES POUR LES CONVERSIONS (Permissives temporairement)
    // ======================================
    match /conversions/{conversionId} {
      // Lecture : propriétaire de la campagne
      allow read: if request.auth != null && 
                     isOwnerOfCampaign(resource.data.campaignId);
      
      // Création : propriétaire de la campagne (temporaire avant Cloud Functions)
      allow create: if request.auth != null && 
                       isOwnerOfCampaign(request.resource.data.campaignId);
      
      // Mise à jour : propriétaire (pour vérification)
      allow update: if request.auth != null && 
                       isOwnerOfCampaign(resource.data.campaignId);
      
      // Suppression : propriétaire (pour suppression en cascade)
      allow delete: if request.auth != null && 
                       isOwnerOfCampaign(resource.data.campaignId);
    }
    
    // ======================================
    // RÈGLES POUR LES LIENS COURTS
    // ======================================
    match /shortLinks/{linkId} {
      // Lecture : propriétaire de la campagne ou accès public pour redirection
      allow read: if request.auth != null && 
                     isOwnerOfCampaign(resource.data.campaignId);
      
      // Lecture publique limitée (juste pour la redirection)
      allow get: if true; // Nécessaire pour le tracking public
      
      // Création : propriétaire de la campagne + structure valide
      allow create: if request.auth != null && 
                       isOwnerOfCampaign(request.resource.data.campaignId) &&
                       isValidShortLink(request.resource.data);
      
      // Mise à jour : propriétaire (pour compteur de clics)
      allow update: if request.auth != null && 
                       isOwnerOfCampaign(resource.data.campaignId);
      
      // Suppression : propriétaire (pour suppression en cascade)
      allow delete: if request.auth != null && 
                       isOwnerOfCampaign(resource.data.campaignId);
    }
    
    // ======================================
    // FONCTIONS DE VALIDATION
    // ======================================
    
    // Vérifier si l'utilisateur est propriétaire d'une campagne
    function isOwnerOfCampaign(campaignId) {
      return exists(/databases/$(database)/documents/campaigns/$(campaignId)) &&
             get(/databases/$(database)/documents/campaigns/$(campaignId)).data.userId == request.auth.uid;
    }
    
    // Validation structure campagne
    function isValidCampaign(data) {
      return data.keys().hasAll(['name', 'description', 'targetUrl', 'userId', 'isActive']) &&
             data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
             data.description is string && data.description.size() <= 500 &&
             data.targetUrl is string && data.targetUrl.matches('https?://.*') &&
             data.userId is string &&
             data.isActive is bool &&
             (!data.keys().hasAny(['createdAt', 'updatedAt']) || 
              (data.createdAt is timestamp && data.updatedAt is timestamp));
    }
    
    // Validation structure affilié
    function isValidAffiliate(data) {
      return data.keys().hasAll(['name', 'email', 'commissionRate', 'campaignId', 'userId', 'trackingCode', 'isActive']) &&
             data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
             data.email is string && data.email.matches('.*@.*\\..*') &&
             data.commissionRate is number && data.commissionRate >= 0 && data.commissionRate <= 100 &&
             data.campaignId is string &&
             data.userId is string &&
             data.trackingCode is string && data.trackingCode.size() > 10 &&
             data.isActive is bool;
    }
    
    // Validation structure lien court
    function isValidShortLink(data) {
      return data.keys().hasAll(['shortCode', 'campaignId', 'affiliateId', 'targetUrl']) &&
             data.shortCode is string && data.shortCode.size() == 6 &&
             data.campaignId is string &&
             data.affiliateId is string &&
             data.targetUrl is string && data.targetUrl.matches('https?://.*') &&
             data.clickCount is number && data.clickCount >= 0;
    }
    
    // Vérifier que seul le statut de vérification change
    function onlyUpdatingVerificationStatus(newData, oldData) {
      return newData.diff(oldData).affectedKeys().hasOnly(['verified']) &&
             newData.verified is bool;
    }
    
    // Vérifier que seul le compteur de clics change
    function onlyUpdatingClickCount(newData, oldData) {
      return newData.diff(oldData).affectedKeys().hasOnly(['clickCount']) &&
             newData.clickCount is number && 
             newData.clickCount >= oldData.clickCount;
    }
    
    // ======================================
    // PROTECTION CONTRE LES ATTAQUES
    // ======================================
    
    // Bloquer toute autre collection non définie
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
