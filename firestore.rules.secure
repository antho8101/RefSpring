/**
 * üõ°Ô∏è Firestore Security Rules - Version Durcie
 */

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Fonction helper pour valider la structure des donn√©es
    function isValidCampaignData(data) {
      return data.keys().hasAll(['name', 'targetUrl', 'userId', 'isActive']) &&
             data.name is string && data.name.size() > 2 && data.name.size() <= 100 &&
             data.targetUrl is string && data.targetUrl.matches('https?://.*') &&
             data.userId is string &&
             data.isActive is bool;
    }
    
    function isValidAffiliateData(data) {
      return data.keys().hasAll(['name', 'email', 'campaignId', 'userId']) &&
             data.name is string && data.name.size() > 1 && data.name.size() <= 50 &&
             data.email is string && data.email.matches('.*@.*\\..*') &&
             data.campaignId is string &&
             data.userId is string;
    }
    
    // Fonction pour v√©rifier si l'utilisateur est admin
    function isAdmin() {
      return request.auth != null && 
             request.auth.token.email in ['admin@refspring.com'];
    }
    
    // Fonction pour v√©rifier la propri√©t√© d'une campagne
    function isCampaignOwner(campaignId) {
      return request.auth != null &&
             request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.userId;
    }
    
    // R√®gles pour les campagnes
    match /campaigns/{campaignId} {
      // Lecture: propri√©taire, admin, ou campagne publique
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         isAdmin() ||
         resource.data.isPublic == true);
      
      // Cr√©ation: utilisateur authentifi√© avec donn√©es valides
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId &&
        isValidCampaignData(request.resource.data);
      
      // Modification: propri√©taire uniquement avec donn√©es valides
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        request.auth.uid == request.resource.data.userId &&
        isValidCampaignData(request.resource.data);
      
      // Suppression: propri√©taire ou admin
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.userId || isAdmin());
    }
    
    // R√®gles pour les affili√©s
    match /affiliates/{affiliateId} {
      // Lecture: propri√©taire de la campagne ou admin
      allow read: if request.auth != null && 
        (isCampaignOwner(resource.data.campaignId) || isAdmin());
      
      // Cr√©ation: propri√©taire de la campagne avec donn√©es valides
      allow create: if request.auth != null && 
        isCampaignOwner(request.resource.data.campaignId) &&
        isValidAffiliateData(request.resource.data);
      
      // Modification: propri√©taire de la campagne avec donn√©es valides
      allow update: if request.auth != null && 
        isCampaignOwner(resource.data.campaignId) &&
        isValidAffiliateData(request.resource.data);
      
      // Suppression: propri√©taire de la campagne ou admin
      allow delete: if request.auth != null && 
        (isCampaignOwner(resource.data.campaignId) || isAdmin());
    }
    
    // R√®gles pour les clics (tracking public mais avec validation)
    match /clicks/{clickId} {
      // Lecture: propri√©taire de la campagne ou admin
      allow read: if request.auth != null && 
        (isCampaignOwner(resource.data.campaignId) || isAdmin());
      
      // Cr√©ation: validation des donn√©es requises
      allow create: if request.resource.data.keys().hasAll(['campaignId', 'affiliateId', 'timestamp']) &&
        request.resource.data.campaignId is string &&
        request.resource.data.affiliateId is string &&
        request.resource.data.timestamp is timestamp;
      
      // Pas de modification/suppression des clics
      allow update, delete: if false;
    }
    
    // R√®gles pour les conversions (tracking public mais avec validation stricte)
    match /conversions/{conversionId} {
      // Lecture: propri√©taire de la campagne ou admin
      allow read: if request.auth != null && 
        (isCampaignOwner(resource.data.campaignId) || isAdmin());
      
      // Cr√©ation: validation stricte des donn√©es
      allow create: if request.resource.data.keys().hasAll(['campaignId', 'affiliateId', 'amount', 'timestamp']) &&
        request.resource.data.campaignId is string &&
        request.resource.data.affiliateId is string &&
        request.resource.data.amount is number &&
        request.resource.data.amount > 0 &&
        request.resource.data.timestamp is timestamp;
      
      // Modification: admin uniquement (pour v√©rification)
      allow update: if isAdmin();
      
      // Pas de suppression des conversions
      allow delete: if false;
    }
    
    // R√®gles pour les liens courts
    match /shortLinks/{shortLinkId} {
      allow read: if true; // Lecture publique pour redirection
      allow write: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
    }
    
    // R√®gles pour les donn√©es de facturation (admin/propri√©taire uniquement)
    match /billingRecords/{recordId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.userId || isAdmin());
    }
    
    // R√®gles par d√©faut: authentification requise
    match /{document=**} {
      allow read, write: if request.auth != null;
    }
  }
}