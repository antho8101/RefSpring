
import { onCall, HttpsError } from 'firebase-functions/v2/https';
import * as admin from 'firebase-admin';

interface QueueProcessRequest {
  forceProcess?: boolean;
  maxItems?: number;
}

export const processConversionQueue = onCall(
  { cors: true },
  async (request) => {
    try {
      console.log('üîÑ QUEUE - D√©but traitement queue de v√©rification');
      
      // V√©rifier l'authentification (optionnel pour les admins)
      if (!request.auth) {
        console.log('‚ö†Ô∏è QUEUE - Traitement automatique sans auth');
      }

      const { forceProcess = false, maxItems = 10 } = request.data as QueueProcessRequest;

      // R√©cup√©rer les √©l√©ments en attente
      const queueQuery = admin.firestore()
        .collection('conversionVerificationQueue')
        .where('status', '==', 'pending')
        .orderBy('priority', 'desc') // Traiter les priorit√©s hautes en premier
        .orderBy('createdAt', 'asc') // Puis par ordre chronologique
        .limit(maxItems);

      const queueSnapshot = await queueQuery.get();
      
      if (queueSnapshot.empty) {
        console.log('üìã QUEUE - Aucun √©l√©ment √† traiter');
        return {
          success: true,
          processedCount: 0,
          message: 'Aucun √©l√©ment en queue'
        };
      }

      console.log(`üìã QUEUE - ${queueSnapshot.size} √©l√©ments √† traiter`);

      let processedCount = 0;
      let errorCount = 0;

      // Traiter chaque √©l√©ment
      for (const queueDoc of queueSnapshot.docs) {
        try {
          const queueData = queueDoc.data();
          console.log(`üîÑ QUEUE - Traitement conversion: ${queueData.conversionId}`);

          // Marquer comme en cours de traitement
          await queueDoc.ref.update({
            status: 'processing',
            processedAt: admin.firestore.FieldValue.serverTimestamp()
          });

          // R√©cup√©rer la conversion
          const conversionDoc = await admin.firestore()
            .collection('conversions')
            .doc(queueData.conversionId)
            .get();

          if (!conversionDoc.exists) {
            console.log(`‚ùå QUEUE - Conversion introuvable: ${queueData.conversionId}`);
            await queueDoc.ref.update({ status: 'failed' });
            errorCount++;
            continue;
          }

          const conversionData = conversionDoc.data();
          
          if (!conversionData) {
            console.error("No conversion data found");
            continue;
          }
          
          // Analyser automatiquement la conversion
          const autoDecision = await analyzeConversionAutomatically(conversionData);
          
          if (autoDecision.action && !forceProcess) {
            // Appliquer la d√©cision automatique
            await admin.firestore()
              .collection('conversions')
              .doc(queueData.conversionId)
              .update({
                status: autoDecision.action === 'approve' ? 'verified' : 'rejected',
                verified: autoDecision.action === 'approve',
                verifiedBy: 'system-auto',
                verifiedAt: admin.firestore.FieldValue.serverTimestamp(),
                verificationNotes: autoDecision.reason
              });

            // Cr√©er le log d'audit
            await admin.firestore()
              .collection('conversionAuditLogs')
              .add({
                conversionId: queueData.conversionId,
                action: autoDecision.action === 'approve' ? 'verified' : 'rejected',
                oldValue: null,
                newValue: JSON.stringify({ status: autoDecision.action === 'approve' ? 'verified' : 'rejected' }),
                performedBy: 'system-auto',
                timestamp: admin.firestore.FieldValue.serverTimestamp(),
                notes: autoDecision.reason
              });

            console.log(`‚úÖ QUEUE - D√©cision automatique: ${autoDecision.action} - ${autoDecision.reason}`);
          } else {
            // N√©cessite une v√©rification manuelle
            await admin.firestore()
              .collection('conversions')
              .doc(queueData.conversionId)
              .update({
                status: 'pending',
                verificationNotes: 'N√©cessite une v√©rification manuelle'
              });

            console.log('üë§ QUEUE - V√©rification manuelle requise');
          }

          // Marquer l'√©l√©ment comme trait√©
          await queueDoc.ref.update({ 
            status: 'completed',
            processedAt: admin.firestore.FieldValue.serverTimestamp()
          });

          processedCount++;

        } catch (error) {
          console.error(`‚ùå QUEUE - Erreur traitement ${queueDoc.id}:`, error);
          await queueDoc.ref.update({ 
            status: 'failed',
            retryCount: admin.firestore.FieldValue.increment(1)
          });
          errorCount++;
        }
      }

      console.log(`‚úÖ QUEUE - Traitement termin√©: ${processedCount} succ√®s, ${errorCount} erreurs`);

      return {
        success: true,
        processedCount,
        errorCount,
        message: `${processedCount} conversions trait√©es`
      };

    } catch (error: unknown) {
      console.error('‚ùå QUEUE - Erreur:', error);
      if (error instanceof HttpsError) {
        throw error;
      }
      throw new HttpsError('internal', 'Erreur de traitement de la queue');
    }
  }
);

async function analyzeConversionAutomatically(conversionData: Record<string, unknown>): Promise<{
  action?: 'approve' | 'reject';
  reason: string;
  confidence: number;
}> {
  const amount = conversionData.amount || 0;
  const riskScore = conversionData.riskScore || 0;
  // const timestamp = conversionData.timestamp?.toDate() || new Date();
  
  // R√®gles automatiques
  
  // 1. Montants tr√®s faibles - auto-approuver
  if (amount < 1000) { // Moins de 10‚Ç¨
    return {
      action: 'approve',
      reason: 'Montant faible, risque minimal',
      confidence: 95
    };
  }
  
  // 2. Score de risque tr√®s √©lev√© - auto-rejeter
  if (riskScore > 80) {
    return {
      action: 'reject',
      reason: 'Score de risque trop √©lev√© (>80%)',
      confidence: 90
    };
  }
  
  // 3. Montants moyens avec risque faible - auto-approuver
  if (amount < 5000 && riskScore < 30) { // Moins de 50‚Ç¨, risque < 30%
    return {
      action: 'approve',
      reason: 'Montant moyen, risque faible',
      confidence: 85
    };
  }
  
  // 4. Tr√®s gros montants - v√©rification manuelle
  if (amount > 50000) { // Plus de 500‚Ç¨
    return {
      reason: 'Montant √©lev√© n√©cessitant v√©rification manuelle',
      confidence: 100
    };
  }
  
  // 5. Score de risque moyen - v√©rification manuelle
  if (riskScore > 50) {
    return {
      reason: 'Score de risque mod√©r√© n√©cessitant v√©rification manuelle',
      confidence: 80
    };
  }
  
  // Par d√©faut - auto-approuver pour les cas normaux
  return {
    action: 'approve',
    reason: 'Conversion standard, aucun flag de risque',
    confidence: 75
  };
}
